{"version":3,"file":"Snowflake.js","names":["defaultConfig","color","radius","speed","wind","changeFrequency","rotationSpeed","Snowflake","canvas","config","updateConfig","params","x","random","offsetWidth","y","offsetHeight","rotation","nextSpeed","nextWind","nextRotationSpeed","framesSinceLastUpdate","images","length","image","randomElement","undefined","previousConfig","isEqual","selectImage","framesPassed","lerp","updateTargetParams","size","HTMLImageElement","loading","sizes","offscreenCanvases","get","set","document","createElement","width","height","getContext","drawImage","ctx","setTransform","Math","ceil","rotate","PI","getImageOffscreenCanvas","beginPath","arc","fillStyle","closePath","fill","WeakMap"],"sources":["../src/Snowflake.ts"],"sourcesContent":["import isEqual from 'react-fast-compare'\r\nimport { lerp, random, randomElement } from './utils'\r\n\r\nexport interface SnowflakeProps {\r\n  /** The color of the snowflake, can be any valid CSS color. */\r\n  color: string\r\n  /**\r\n   * The minimum and maximum radius of the snowflake, will be\r\n   * randomly selected within this range.\r\n   *\r\n   * The default value is `[0.5, 3.0]`.\r\n   */\r\n  radius: [number, number]\r\n  /**\r\n   * The minimum and maximum speed of the snowflake.\r\n   *\r\n   * The speed determines how quickly the snowflake moves\r\n   * along the y axis (vertical speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[1.0, 3.0]`.\r\n   */\r\n  speed: [number, number]\r\n  /**\r\n   * The minimum and maximum wind of the snowflake.\r\n   *\r\n   * The wind determines how quickly the snowflake moves\r\n   * along the x axis (horizontal speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-0.5, 2.0]`.\r\n   */\r\n  wind: [number, number]\r\n  /**\r\n   * The frequency in frames that the wind and speed values\r\n   * will update.\r\n   *\r\n   * The default value is 200.\r\n   */\r\n  changeFrequency: number\r\n  /**\r\n   * An array of images that will be rendered as the snowflakes instead\r\n   * of the default circle shapes.\r\n   */\r\n  images?: CanvasImageSource[]\r\n  /**\r\n   * The minimum and maximum rotation speed of the snowflake (in degrees of\r\n   * rotation per frame).\r\n   *\r\n   * The rotation speed determines how quickly the snowflake rotates when\r\n   * an image is being rendered.\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-1.0, 1.0]`.\r\n   */\r\n  rotationSpeed: [number, number]\r\n}\r\n\r\nexport type SnowflakeConfig = Partial<SnowflakeProps>\r\n\r\nexport const defaultConfig: SnowflakeProps = {\r\n  color: '#dee4fd',\r\n  radius: [0.5, 3.0],\r\n  speed: [1.0, 3.0],\r\n  wind: [-0.5, 2.0],\r\n  changeFrequency: 200,\r\n  rotationSpeed: [-1.0, 1.0],\r\n}\r\n\r\ninterface SnowflakeParams {\r\n  x: number\r\n  y: number\r\n  radius: number\r\n  rotation: number\r\n  rotationSpeed: number\r\n  speed: number\r\n  wind: number\r\n  nextSpeed: number\r\n  nextWind: number\r\n  nextRotationSpeed: number\r\n}\r\n\r\n/**\r\n * An individual snowflake that will update it's location every call to `update`\r\n * and draw itself to the canvas every call to `draw`.\r\n */\r\nclass Snowflake {\r\n  static offscreenCanvases = new WeakMap<CanvasImageSource, Record<number, HTMLCanvasElement>>()\r\n\r\n  private config!: SnowflakeProps\r\n  private params: SnowflakeParams\r\n  private framesSinceLastUpdate: number\r\n  private image?: CanvasImageSource\r\n\r\n  public constructor(canvas: HTMLCanvasElement, config: SnowflakeConfig = {}) {\r\n    // Set custom config\r\n    this.updateConfig(config)\r\n\r\n    // Setting initial parameters\r\n    const { radius, wind, speed, rotationSpeed } = this.config\r\n\r\n    this.params = {\r\n      x: random(0, canvas.offsetWidth),\r\n      y: random(-canvas.offsetHeight, 0),\r\n      rotation: random(0, 360),\r\n      radius: random(...radius),\r\n      speed: random(...speed),\r\n      wind: random(...wind),\r\n      rotationSpeed: random(...rotationSpeed),\r\n      nextSpeed: random(...wind),\r\n      nextWind: random(...speed),\r\n      nextRotationSpeed: random(...rotationSpeed),\r\n    }\r\n\r\n    this.framesSinceLastUpdate = 0\r\n  }\r\n\r\n  private selectImage() {\r\n    if (this.config.images && this.config.images.length > 0) {\r\n      this.image = randomElement(this.config.images)\r\n    } else {\r\n      this.image = undefined\r\n    }\r\n  }\r\n\r\n  public updateConfig(config: SnowflakeConfig): void {\r\n    const previousConfig = this.config\r\n    this.config = { ...defaultConfig, ...config }\r\n    this.config.changeFrequency = random(this.config.changeFrequency, this.config.changeFrequency * 1.5)\r\n\r\n    // Update the radius if the config has changed, it won't gradually update on it's own\r\n    if (this.params && !isEqual(this.config.radius, previousConfig?.radius)) {\r\n      this.params.radius = random(...this.config.radius)\r\n    }\r\n\r\n    if (!isEqual(this.config.images, previousConfig?.images)) {\r\n      this.selectImage()\r\n    }\r\n  }\r\n\r\n  private updateTargetParams(): void {\r\n    this.params.nextSpeed = random(...this.config.speed)\r\n    this.params.nextWind = random(...this.config.wind)\r\n    if (this.image) {\r\n      this.params.nextRotationSpeed = random(...this.config.rotationSpeed)\r\n    }\r\n  }\r\n\r\n  public update(canvas: HTMLCanvasElement, framesPassed = 1): void {\r\n    const { x, y, rotation, rotationSpeed, nextRotationSpeed, wind, speed, nextWind, nextSpeed, radius } = this.params\r\n\r\n    // Update current location, wrapping around if going off the canvas\r\n    this.params.x = (x + wind * framesPassed) % (canvas.offsetWidth + radius * 2)\r\n    if (this.params.x > canvas.offsetWidth + radius) this.params.x = -radius\r\n    this.params.y = (y + speed * framesPassed) % (canvas.offsetHeight + radius * 2)\r\n    if (this.params.y > canvas.offsetHeight + radius) this.params.y = -radius\r\n\r\n    // Apply rotation\r\n    if (this.image) {\r\n      this.params.rotation = (rotation + rotationSpeed) % 360\r\n    }\r\n\r\n    // Update the wind, speed and rotation towards the desired values\r\n    this.params.speed = lerp(speed, nextSpeed, 0.01)\r\n    this.params.wind = lerp(wind, nextWind, 0.01)\r\n    this.params.rotationSpeed = lerp(rotationSpeed, nextRotationSpeed, 0.01)\r\n\r\n    if (this.framesSinceLastUpdate++ > this.config.changeFrequency) {\r\n      this.updateTargetParams()\r\n      this.framesSinceLastUpdate = 0\r\n    }\r\n  }\r\n\r\n  private getImageOffscreenCanvas(image: CanvasImageSource, size: number): CanvasImageSource {\r\n    if (image instanceof HTMLImageElement && image.loading) return image\r\n    let sizes = Snowflake.offscreenCanvases.get(image)\r\n\r\n    if (!sizes) {\r\n      sizes = {}\r\n      Snowflake.offscreenCanvases.set(image, sizes)\r\n    }\r\n\r\n    if (!(size in sizes)) {\r\n      const canvas = document.createElement('canvas')\r\n      canvas.width = size\r\n      canvas.height = size\r\n      canvas.getContext('2d')?.drawImage(image, 0, 0, size, size)\r\n      sizes[size] = canvas\r\n    }\r\n\r\n    return sizes[size] ?? image\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D): void {\r\n    if (this.image) {\r\n      // ctx.save()\r\n      // ctx.translate(this.params.x, this.params.y)\r\n      ctx.setTransform(1, 0, 0, 1, this.params.x, this.params.y)\r\n\r\n      const radius = Math.ceil(this.params.radius)\r\n      ctx.rotate((this.params.rotation * Math.PI) / 180)\r\n      ctx.drawImage(\r\n        this.getImageOffscreenCanvas(this.image, radius),\r\n        -Math.ceil(radius / 2),\r\n        -Math.ceil(radius / 2),\r\n        radius,\r\n        radius,\r\n      )\r\n\r\n      // ctx.restore()\r\n    } else {\r\n      ctx.beginPath()\r\n      ctx.arc(this.params.x, this.params.y, this.params.radius, 0, 2 * Math.PI)\r\n      ctx.fillStyle = this.config.color\r\n      ctx.closePath()\r\n      ctx.fill()\r\n    }\r\n  }\r\n}\r\n\r\nexport default Snowflake\r\n"],"mappings":"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"}