{
  "version": 3,
  "sources": ["../../react-snowfall/src/config.ts", "../../react-fast-compare/index.js", "../../react-snowfall/src/utils.ts", "../../react-snowfall/src/Snowflake.ts", "../../react-snowfall/src/hooks.ts", "../../react-snowfall/src/Snowfall.tsx"],
  "sourcesContent": ["export const snowfallBaseStyle: React.CSSProperties = {\r\n  pointerEvents: 'none',\r\n  backgroundColor: 'transparent',\r\n  position: 'absolute',\r\n  top: 0,\r\n  left: 0,\r\n  width: '100%',\r\n  height: '100%',\r\n}\r\n\r\n// Target of 60 frames per second\r\nexport const targetFrameTime = 1000 / 60\r\n", "/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */\n\nvar hasElementType = typeof Element !== 'undefined';\nvar hasMap = typeof Map === 'function';\nvar hasSet = typeof Set === 'function';\nvar hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;\n\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\n\nfunction equal(a, b) {\n  // START: fast-deep-equal es6/index.js 3.1.3\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    // START: Modifications:\n    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n    //    to co-exist with es5.\n    // 2. Replace `for of` with es5 compliant iteration using `for`.\n    //    Basically, take:\n    //\n    //    ```js\n    //    for (i of a.entries())\n    //      if (!b.has(i[0])) return false;\n    //    ```\n    //\n    //    ... and convert to:\n    //\n    //    ```js\n    //    it = a.entries();\n    //    while (!(i = it.next()).done)\n    //      if (!b.has(i.value[0])) return false;\n    //    ```\n    //\n    //    **Note**: `i` access switches to `i.value`.\n    var it;\n    if (hasMap && (a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!equal(i.value[1], b.get(i.value[0]))) return false;\n      return true;\n    }\n\n    if (hasSet && (a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      return true;\n    }\n    // END: Modifications\n\n    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    // START: Modifications:\n    // Apply guards for `Object.create(null)` handling. See:\n    // - https://github.com/FormidableLabs/react-fast-compare/issues/64\n    // - https://github.com/epoberezkin/fast-deep-equal/issues/49\n    if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function') return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function') return a.toString() === b.toString();\n    // END: Modifications\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    // END: fast-deep-equal\n\n    // START: react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element) return false;\n\n    // custom handling for React/Preact\n    for (i = length; i-- !== 0;) {\n      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner\n        // Preact-specific: avoid traversing Preact elements' __v and __o\n        //    __v = $_original / $_vnode\n        //    __o = $_owner\n        // These properties contain circular references and are not needed when\n        // comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of elements\n\n        continue;\n      }\n\n      // all other properties should be traversed as usual\n      if (!equal(a[keys[i]], b[keys[i]])) return false;\n    }\n    // END: react-fast-compare\n\n    // START: fast-deep-equal\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function isEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if (((error.message || '').match(/stack|recursion/i))) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('react-fast-compare cannot handle circular refs');\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n", "/**\r\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\r\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\r\n * @param min The minimum value\r\n * @param max The maximum value\r\n */\r\nexport function random(min: number, max: number): number {\r\n  const randomNumber = Math.random() * (max - min + 1) + min\r\n\r\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\r\n    return randomNumber\r\n  } else {\r\n    return Math.floor(randomNumber)\r\n  }\r\n}\r\n\r\n/**\r\n * Linear interpolation function to gradually step towards a target value\r\n * @param start The current value\r\n * @param end The target value\r\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\r\n */\r\nexport function lerp(start: number, end: number, normal: number) {\r\n  return (1 - normal) * start + normal * end\r\n}\r\n\r\n/**\r\n * Gets the height and width of the provided HTML element\r\n * @param element The html element to measure\r\n */\r\nexport function getSize(element?: HTMLElement | null) {\r\n  if (!element) return { height: 0, width: 0 }\r\n\r\n  return {\r\n    height: element.offsetHeight,\r\n    width: element.offsetWidth,\r\n  }\r\n}\r\n\r\n/**\r\n * Selects a random item from an array of inputs.\r\n *\r\n * @param items The array of items to choose from\r\n * @returns A random item selected from the array\r\n */\r\nexport function randomElement<T>(items: T[]): T {\r\n  const index = Math.floor(Math.random() * items.length)\r\n  return items[index]\r\n}\r\n", "import isEqual from 'react-fast-compare'\r\nimport { lerp, random, randomElement } from './utils'\r\n\r\nexport interface SnowflakeProps {\r\n  /** The color of the snowflake, can be any valid CSS color. */\r\n  color: string\r\n  /**\r\n   * The minimum and maximum radius of the snowflake, will be\r\n   * randomly selected within this range.\r\n   *\r\n   * The default value is `[0.5, 3.0]`.\r\n   */\r\n  radius: [number, number]\r\n  /**\r\n   * The minimum and maximum speed of the snowflake.\r\n   *\r\n   * The speed determines how quickly the snowflake moves\r\n   * along the y axis (vertical speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[1.0, 3.0]`.\r\n   */\r\n  speed: [number, number]\r\n  /**\r\n   * The minimum and maximum wind of the snowflake.\r\n   *\r\n   * The wind determines how quickly the snowflake moves\r\n   * along the x axis (horizontal speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-0.5, 2.0]`.\r\n   */\r\n  wind: [number, number]\r\n  /**\r\n   * The frequency in frames that the wind and speed values\r\n   * will update.\r\n   *\r\n   * The default value is 200.\r\n   */\r\n  changeFrequency: number\r\n  /**\r\n   * An array of images that will be rendered as the snowflakes instead\r\n   * of the default circle shapes.\r\n   */\r\n  images?: CanvasImageSource[]\r\n  /**\r\n   * The minimum and maximum rotation speed of the snowflake (in degrees of\r\n   * rotation per frame).\r\n   *\r\n   * The rotation speed determines how quickly the snowflake rotates when\r\n   * an image is being rendered.\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-1.0, 1.0]`.\r\n   */\r\n  rotationSpeed: [number, number]\r\n}\r\n\r\nexport type SnowflakeConfig = Partial<SnowflakeProps>\r\n\r\nexport const defaultConfig: SnowflakeProps = {\r\n  color: '#dee4fd',\r\n  radius: [0.5, 3.0],\r\n  speed: [1.0, 3.0],\r\n  wind: [-0.5, 2.0],\r\n  changeFrequency: 200,\r\n  rotationSpeed: [-1.0, 1.0],\r\n}\r\n\r\ninterface SnowflakeParams {\r\n  x: number\r\n  y: number\r\n  radius: number\r\n  rotation: number\r\n  rotationSpeed: number\r\n  speed: number\r\n  wind: number\r\n  nextSpeed: number\r\n  nextWind: number\r\n  nextRotationSpeed: number\r\n}\r\n\r\n/**\r\n * An individual snowflake that will update it's location every call to `update`\r\n * and draw itself to the canvas every call to `draw`.\r\n */\r\nclass Snowflake {\r\n  static offscreenCanvases = new WeakMap<CanvasImageSource, Record<number, HTMLCanvasElement>>()\r\n\r\n  private config!: SnowflakeProps\r\n  private params: SnowflakeParams\r\n  private framesSinceLastUpdate: number\r\n  private image?: CanvasImageSource\r\n\r\n  public constructor(canvas: HTMLCanvasElement, config: SnowflakeConfig = {}) {\r\n    // Set custom config\r\n    this.updateConfig(config)\r\n\r\n    // Setting initial parameters\r\n    const { radius, wind, speed, rotationSpeed } = this.config\r\n\r\n    this.params = {\r\n      x: random(0, canvas.offsetWidth),\r\n      y: random(-canvas.offsetHeight, 0),\r\n      rotation: random(0, 360),\r\n      radius: random(...radius),\r\n      speed: random(...speed),\r\n      wind: random(...wind),\r\n      rotationSpeed: random(...rotationSpeed),\r\n      nextSpeed: random(...wind),\r\n      nextWind: random(...speed),\r\n      nextRotationSpeed: random(...rotationSpeed),\r\n    }\r\n\r\n    this.framesSinceLastUpdate = 0\r\n  }\r\n\r\n  private selectImage() {\r\n    if (this.config.images && this.config.images.length > 0) {\r\n      this.image = randomElement(this.config.images)\r\n    } else {\r\n      this.image = undefined\r\n    }\r\n  }\r\n\r\n  public updateConfig(config: SnowflakeConfig): void {\r\n    const previousConfig = this.config\r\n    this.config = { ...defaultConfig, ...config }\r\n    this.config.changeFrequency = random(this.config.changeFrequency, this.config.changeFrequency * 1.5)\r\n\r\n    // Update the radius if the config has changed, it won't gradually update on it's own\r\n    if (this.params && !isEqual(this.config.radius, previousConfig?.radius)) {\r\n      this.params.radius = random(...this.config.radius)\r\n    }\r\n\r\n    if (!isEqual(this.config.images, previousConfig?.images)) {\r\n      this.selectImage()\r\n    }\r\n  }\r\n\r\n  private updateTargetParams(): void {\r\n    this.params.nextSpeed = random(...this.config.speed)\r\n    this.params.nextWind = random(...this.config.wind)\r\n    if (this.image) {\r\n      this.params.nextRotationSpeed = random(...this.config.rotationSpeed)\r\n    }\r\n  }\r\n\r\n  public update(canvas: HTMLCanvasElement, framesPassed = 1): void {\r\n    const { x, y, rotation, rotationSpeed, nextRotationSpeed, wind, speed, nextWind, nextSpeed, radius } = this.params\r\n\r\n    // Update current location, wrapping around if going off the canvas\r\n    this.params.x = (x + wind * framesPassed) % (canvas.offsetWidth + radius * 2)\r\n    if (this.params.x > canvas.offsetWidth + radius) this.params.x = -radius\r\n    this.params.y = (y + speed * framesPassed) % (canvas.offsetHeight + radius * 2)\r\n    if (this.params.y > canvas.offsetHeight + radius) this.params.y = -radius\r\n\r\n    // Apply rotation\r\n    if (this.image) {\r\n      this.params.rotation = (rotation + rotationSpeed) % 360\r\n    }\r\n\r\n    // Update the wind, speed and rotation towards the desired values\r\n    this.params.speed = lerp(speed, nextSpeed, 0.01)\r\n    this.params.wind = lerp(wind, nextWind, 0.01)\r\n    this.params.rotationSpeed = lerp(rotationSpeed, nextRotationSpeed, 0.01)\r\n\r\n    if (this.framesSinceLastUpdate++ > this.config.changeFrequency) {\r\n      this.updateTargetParams()\r\n      this.framesSinceLastUpdate = 0\r\n    }\r\n  }\r\n\r\n  private getImageOffscreenCanvas(image: CanvasImageSource, size: number): CanvasImageSource {\r\n    if (image instanceof HTMLImageElement && image.loading) return image\r\n    let sizes = Snowflake.offscreenCanvases.get(image)\r\n\r\n    if (!sizes) {\r\n      sizes = {}\r\n      Snowflake.offscreenCanvases.set(image, sizes)\r\n    }\r\n\r\n    if (!(size in sizes)) {\r\n      const canvas = document.createElement('canvas')\r\n      canvas.width = size\r\n      canvas.height = size\r\n      canvas.getContext('2d')?.drawImage(image, 0, 0, size, size)\r\n      sizes[size] = canvas\r\n    }\r\n\r\n    return sizes[size] ?? image\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D): void {\r\n    if (this.image) {\r\n      // ctx.save()\r\n      // ctx.translate(this.params.x, this.params.y)\r\n      ctx.setTransform(1, 0, 0, 1, this.params.x, this.params.y)\r\n\r\n      const radius = Math.ceil(this.params.radius)\r\n      ctx.rotate((this.params.rotation * Math.PI) / 180)\r\n      ctx.drawImage(\r\n        this.getImageOffscreenCanvas(this.image, radius),\r\n        -Math.ceil(radius / 2),\r\n        -Math.ceil(radius / 2),\r\n        radius,\r\n        radius,\r\n      )\r\n\r\n      // ctx.restore()\r\n    } else {\r\n      ctx.beginPath()\r\n      ctx.arc(this.params.x, this.params.y, this.params.radius, 0, 2 * Math.PI)\r\n      ctx.fillStyle = this.config.color\r\n      ctx.closePath()\r\n      ctx.fill()\r\n    }\r\n  }\r\n}\r\n\r\nexport default Snowflake\r\n", "import { useCallback, useLayoutEffect, useEffect, useRef, useState, useMemo } from 'react'\r\nimport isEqual from 'react-fast-compare'\r\nimport Snowflake, { SnowflakeConfig } from './Snowflake'\r\nimport { snowfallBaseStyle } from './config'\r\nimport { getSize } from './utils'\r\n\r\n/**\r\n * A utility function to create a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\r\nconst createSnowflakes = (\r\n  canvasRef: React.RefObject<HTMLCanvasElement>,\r\n  amount: number,\r\n  config: SnowflakeConfig,\r\n): Snowflake[] => {\r\n  if (!canvasRef.current) return []\r\n\r\n  const snowflakes: Snowflake[] = []\r\n\r\n  for (let i = 0; i < amount; i++) {\r\n    snowflakes.push(new Snowflake(canvasRef.current, config))\r\n  }\r\n\r\n  return snowflakes\r\n}\r\n\r\n/**\r\n * A utility hook to manage creating and updating a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\r\nexport const useSnowflakes = (\r\n  canvasRef: React.RefObject<HTMLCanvasElement>,\r\n  amount: number,\r\n  config: SnowflakeConfig,\r\n) => {\r\n  const [snowflakes, setSnowflakes] = useState<Snowflake[]>([])\r\n\r\n  // Handle change of amount\r\n  useEffect(() => {\r\n    setSnowflakes((snowflakes) => {\r\n      const sizeDifference = amount - snowflakes.length\r\n\r\n      if (sizeDifference > 0) {\r\n        return [...snowflakes, ...createSnowflakes(canvasRef, sizeDifference, config)]\r\n      }\r\n\r\n      if (sizeDifference < 0) {\r\n        return snowflakes.slice(0, amount)\r\n      }\r\n\r\n      return snowflakes\r\n    })\r\n  }, [amount, canvasRef, config])\r\n\r\n  // Handle change of config\r\n  useEffect(() => {\r\n    setSnowflakes((snowflakes) =>\r\n      snowflakes.map((snowflake) => {\r\n        snowflake.updateConfig(config)\r\n        return snowflake\r\n      }),\r\n    )\r\n  }, [config])\r\n\r\n  return snowflakes\r\n}\r\n\r\n/**\r\n * Returns the height and width of a HTML element, uses the `ResizeObserver` api if available to detect changes to the\r\n * size. Falls back to listening for resize events on the window.\r\n * @param ref A ref to the HTML element to be measured\r\n */\r\nexport const useComponentSize = (ref: React.RefObject<HTMLElement>) => {\r\n  const [size, setSize] = useState(getSize(ref.current))\r\n\r\n  const resizeHandler = useCallback(() => {\r\n    if (ref.current) {\r\n      setSize(getSize(ref.current))\r\n    }\r\n  }, [ref])\r\n\r\n  useLayoutEffect(() => {\r\n    const { ResizeObserver } = window\r\n\r\n    if (!ref.current) return\r\n    resizeHandler()\r\n\r\n    if (typeof ResizeObserver === 'function') {\r\n      const resizeObserver = new ResizeObserver(resizeHandler)\r\n      resizeObserver.observe(ref.current)\r\n\r\n      return () => resizeObserver.disconnect()\r\n    } else {\r\n      window.addEventListener('resize', resizeHandler)\r\n\r\n      return () => window.removeEventListener('resize', resizeHandler)\r\n    }\r\n  }, [ref, resizeHandler])\r\n\r\n  return size\r\n}\r\n\r\n/**\r\n * Utility hook that merges any provided styles with the default styles\r\n * @param overrides The style prop passed into the component\r\n */\r\nexport const useSnowfallStyle = (overrides?: React.CSSProperties): React.CSSProperties => {\r\n  const styles = useMemo(\r\n    () => ({\r\n      ...snowfallBaseStyle,\r\n      ...(overrides || {}),\r\n    }),\r\n    [overrides],\r\n  )\r\n\r\n  return styles\r\n}\r\n\r\n/**\r\n * Same as `React.useEffect` but uses a deep comparison on the dependency array. This should only\r\n * be used when working with non-primitive dependencies.\r\n *\r\n * @param effect Effect callback to run\r\n * @param deps Effect dependencies\r\n */\r\nexport function useDeepCompareEffect(effect: React.EffectCallback, deps: React.DependencyList) {\r\n  const ref = useRef<React.DependencyList>(deps)\r\n\r\n  // Only update the current dependencies if they are not deep equal\r\n  if (!isEqual(deps, ref.current)) {\r\n    ref.current = deps\r\n  }\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  return useEffect(effect, ref.current)\r\n}\r\n\r\n/**\r\n * Utility hook to stabilize a reference to a value, the returned value will always match the input value\r\n * but (unlike an inline object) will maintain [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * equality until a change is made.\r\n *\r\n * @example\r\n *\r\n * const obj = useDeepMemo({ foo: 'bar', bar: 'baz' }) // <- inline object creation\r\n * const prevValue = usePrevious(obj) // <- value from the previous render\r\n * console.log(obj === prevValue) // <- always logs true until value changes\r\n */\r\nexport function useDeepMemo<T>(value: T): T {\r\n  const [state, setState] = useState(value)\r\n\r\n  useDeepCompareEffect(() => setState(value), [value])\r\n\r\n  return state\r\n}\r\n", "import React, { useCallback, useEffect, useRef } from 'react'\r\nimport { targetFrameTime } from './config'\r\nimport { useComponentSize, useSnowfallStyle, useSnowflakes, useDeepMemo } from './hooks'\r\nimport { SnowflakeProps, defaultConfig } from './Snowflake'\r\n\r\nexport interface SnowfallProps extends Partial<SnowflakeProps> {\r\n  /**\r\n   * The number of snowflakes to be rendered.\r\n   *\r\n   * The default value is 150.\r\n   */\r\n  snowflakeCount?: number\r\n  /**\r\n   * Any style properties that will be passed to the canvas element.\r\n   */\r\n  style?: React.CSSProperties\r\n}\r\n\r\nconst Snowfall = ({\r\n  color = defaultConfig.color,\r\n  changeFrequency = defaultConfig.changeFrequency,\r\n  radius = defaultConfig.radius,\r\n  speed = defaultConfig.speed,\r\n  wind = defaultConfig.wind,\r\n  rotationSpeed = defaultConfig.rotationSpeed,\r\n  snowflakeCount = 150,\r\n  images,\r\n  style,\r\n}: SnowfallProps = {}): JSX.Element => {\r\n  const mergedStyle = useSnowfallStyle(style)\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const canvasSize = useComponentSize(canvasRef)\r\n  const animationFrame = useRef(0)\r\n\r\n  const lastUpdate = useRef(Date.now())\r\n  const config = useDeepMemo<SnowflakeProps>({ color, changeFrequency, radius, speed, wind, rotationSpeed, images })\r\n  const snowflakes = useSnowflakes(canvasRef, snowflakeCount, config)\r\n\r\n  const render = useCallback(\r\n    (framesPassed = 1) => {\r\n      const canvas = canvasRef.current\r\n      if (canvas) {\r\n        // Update the positions of the snowflakes\r\n        snowflakes.forEach((snowflake) => snowflake.update(canvas, framesPassed))\r\n\r\n        // Render them if the canvas is available\r\n        const ctx = canvas.getContext('2d')\r\n        if (ctx) {\r\n          ctx.setTransform(1, 0, 0, 1, 0, 0)\r\n          ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight)\r\n\r\n          snowflakes.forEach((snowflake) => snowflake.draw(ctx))\r\n        }\r\n      }\r\n    },\r\n    [snowflakes],\r\n  )\r\n\r\n  const loop = useCallback(() => {\r\n    // Update based on time passed so that a slow frame rate won't slow down the snowflake\r\n    const now = Date.now()\r\n    const msPassed = Date.now() - lastUpdate.current\r\n    lastUpdate.current = now\r\n\r\n    // Frames that would have passed if running at 60 fps\r\n    const framesPassed = msPassed / targetFrameTime\r\n\r\n    render(framesPassed)\r\n\r\n    animationFrame.current = requestAnimationFrame(loop)\r\n  }, [render])\r\n\r\n  useEffect(() => {\r\n    loop()\r\n    return () => cancelAnimationFrame(animationFrame.current)\r\n  }, [loop])\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      height={canvasSize.height}\r\n      width={canvasSize.width}\r\n      style={mergedStyle}\r\n      data-testid=\"SnowfallCanvas\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default Snowfall\r\n"],
  "mappings": "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",
  "names": ["snowfallBaseStyle", "pointerEvents", "backgroundColor", "position", "top", "left", "width", "height", "targetFrameTime", "random", "min", "max", "randomNumber", "Math", "Number", "isInteger", "floor", "lerp", "start", "end", "normal", "getSize", "element", "height", "width", "offsetHeight", "offsetWidth", "randomElement", "items", "index", "length", "defaultConfig", "color", "radius", "speed", "wind", "changeFrequency", "rotationSpeed", "Snowflake", "canvas", "config", "updateConfig", "params", "x", "random", "offsetWidth", "y", "offsetHeight", "rotation", "nextSpeed", "nextWind", "nextRotationSpeed", "framesSinceLastUpdate", "images", "length", "image", "randomElement", "undefined", "previousConfig", "isEqual", "selectImage", "framesPassed", "lerp", "updateTargetParams", "size", "HTMLImageElement", "loading", "sizes", "offscreenCanvases", "get", "set", "document", "createElement", "width", "height", "getContext", "drawImage", "ctx", "setTransform", "Math", "ceil", "rotate", "PI", "getImageOffscreenCanvas", "beginPath", "arc", "fillStyle", "closePath", "fill", "WeakMap", "createSnowflakes", "canvasRef", "amount", "config", "current", "snowflakes", "i", "push", "Snowflake", "useSnowflakes", "useState", "setSnowflakes", "useEffect", "sizeDifference", "length", "slice", "map", "snowflake", "updateConfig", "useComponentSize", "ref", "getSize", "size", "setSize", "resizeHandler", "useCallback", "useLayoutEffect", "window", "ResizeObserver", "resizeObserver", "observe", "disconnect", "addEventListener", "removeEventListener", "useSnowfallStyle", "overrides", "styles", "useMemo", "snowfallBaseStyle", "useDeepCompareEffect", "effect", "deps", "useRef", "isEqual", "useDeepMemo", "value", "state", "setState", "Snowfall", "color", "defaultConfig", "changeFrequency", "radius", "speed", "wind", "rotationSpeed", "snowflakeCount", "images", "style", "mergedStyle", "useSnowfallStyle", "canvasRef", "useRef", "canvasSize", "useComponentSize", "animationFrame", "lastUpdate", "Date", "now", "config", "useDeepMemo", "snowflakes", "useSnowflakes", "render", "useCallback", "framesPassed", "canvas", "current", "forEach", "snowflake", "update", "ctx", "getContext", "setTransform", "clearRect", "offsetWidth", "offsetHeight", "draw", "loop", "msPassed", "targetFrameTime", "requestAnimationFrame", "useEffect", "cancelAnimationFrame", "height", "width"]
}
