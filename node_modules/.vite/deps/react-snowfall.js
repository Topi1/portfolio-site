import {
  __commonJS,
  require_react
} from "./chunk-MYQCFY5U.js";

// node_modules/react-snowfall/lib/config.js
var require_config = __commonJS({
  "node_modules/react-snowfall/lib/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.targetFrameTime = exports.snowfallBaseStyle = void 0;
    var snowfallBaseStyle = {
      pointerEvents: "none",
      backgroundColor: "transparent",
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%"
    };
    exports.snowfallBaseStyle = snowfallBaseStyle;
    var targetFrameTime = 1e3 / 60;
    exports.targetFrameTime = targetFrameTime;
  }
});

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys[i] === "_owner" || keys[i] === "__v" || keys[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys[i]], b[keys[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if ((error.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error;
      }
    };
  }
});

// node_modules/react-snowfall/lib/utils.js
var require_utils = __commonJS({
  "node_modules/react-snowfall/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getSize = getSize;
    exports.lerp = lerp;
    exports.random = random;
    exports.randomElement = randomElement;
    function random(min, max) {
      var randomNumber = Math.random() * (max - min + 1) + min;
      if (!Number.isInteger(min) || !Number.isInteger(max)) {
        return randomNumber;
      } else {
        return Math.floor(randomNumber);
      }
    }
    function lerp(start, end, normal) {
      return (1 - normal) * start + normal * end;
    }
    function getSize(element) {
      if (!element)
        return {
          height: 0,
          width: 0
        };
      return {
        height: element.offsetHeight,
        width: element.offsetWidth
      };
    }
    function randomElement(items) {
      var index = Math.floor(Math.random() * items.length);
      return items[index];
    }
  }
});

// node_modules/react-snowfall/lib/Snowflake.js
var require_Snowflake = __commonJS({
  "node_modules/react-snowfall/lib/Snowflake.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.defaultConfig = exports["default"] = void 0;
    var _reactFastCompare = _interopRequireDefault(require_react_fast_compare());
    var _utils = require_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var defaultConfig = {
      color: "#dee4fd",
      radius: [0.5, 3],
      speed: [1, 3],
      wind: [-0.5, 2],
      changeFrequency: 200,
      rotationSpeed: [-1, 1]
    };
    exports.defaultConfig = defaultConfig;
    var Snowflake = function() {
      function Snowflake2(canvas) {
        var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        _classCallCheck(this, Snowflake2);
        _defineProperty(this, "config", void 0);
        _defineProperty(this, "params", void 0);
        _defineProperty(this, "framesSinceLastUpdate", void 0);
        _defineProperty(this, "image", void 0);
        this.updateConfig(config);
        var _this$config = this.config, radius = _this$config.radius, wind = _this$config.wind, speed = _this$config.speed, rotationSpeed = _this$config.rotationSpeed;
        this.params = {
          x: (0, _utils.random)(0, canvas.offsetWidth),
          y: (0, _utils.random)(-canvas.offsetHeight, 0),
          rotation: (0, _utils.random)(0, 360),
          radius: _utils.random.apply(void 0, _toConsumableArray(radius)),
          speed: _utils.random.apply(void 0, _toConsumableArray(speed)),
          wind: _utils.random.apply(void 0, _toConsumableArray(wind)),
          rotationSpeed: _utils.random.apply(void 0, _toConsumableArray(rotationSpeed)),
          nextSpeed: _utils.random.apply(void 0, _toConsumableArray(wind)),
          nextWind: _utils.random.apply(void 0, _toConsumableArray(speed)),
          nextRotationSpeed: _utils.random.apply(void 0, _toConsumableArray(rotationSpeed))
        };
        this.framesSinceLastUpdate = 0;
      }
      _createClass(Snowflake2, [{
        key: "selectImage",
        value: function selectImage() {
          if (this.config.images && this.config.images.length > 0) {
            this.image = (0, _utils.randomElement)(this.config.images);
          } else {
            this.image = void 0;
          }
        }
      }, {
        key: "updateConfig",
        value: function updateConfig(config) {
          var previousConfig = this.config;
          this.config = _objectSpread(_objectSpread({}, defaultConfig), config);
          this.config.changeFrequency = (0, _utils.random)(this.config.changeFrequency, this.config.changeFrequency * 1.5);
          if (this.params && !(0, _reactFastCompare["default"])(this.config.radius, previousConfig === null || previousConfig === void 0 ? void 0 : previousConfig.radius)) {
            this.params.radius = _utils.random.apply(void 0, _toConsumableArray(this.config.radius));
          }
          if (!(0, _reactFastCompare["default"])(this.config.images, previousConfig === null || previousConfig === void 0 ? void 0 : previousConfig.images)) {
            this.selectImage();
          }
        }
      }, {
        key: "updateTargetParams",
        value: function updateTargetParams() {
          this.params.nextSpeed = _utils.random.apply(void 0, _toConsumableArray(this.config.speed));
          this.params.nextWind = _utils.random.apply(void 0, _toConsumableArray(this.config.wind));
          if (this.image) {
            this.params.nextRotationSpeed = _utils.random.apply(void 0, _toConsumableArray(this.config.rotationSpeed));
          }
        }
      }, {
        key: "update",
        value: function update(canvas) {
          var framesPassed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
          var _this$params = this.params, x = _this$params.x, y = _this$params.y, rotation = _this$params.rotation, rotationSpeed = _this$params.rotationSpeed, nextRotationSpeed = _this$params.nextRotationSpeed, wind = _this$params.wind, speed = _this$params.speed, nextWind = _this$params.nextWind, nextSpeed = _this$params.nextSpeed, radius = _this$params.radius;
          this.params.x = (x + wind * framesPassed) % (canvas.offsetWidth + radius * 2);
          if (this.params.x > canvas.offsetWidth + radius)
            this.params.x = -radius;
          this.params.y = (y + speed * framesPassed) % (canvas.offsetHeight + radius * 2);
          if (this.params.y > canvas.offsetHeight + radius)
            this.params.y = -radius;
          if (this.image) {
            this.params.rotation = (rotation + rotationSpeed) % 360;
          }
          this.params.speed = (0, _utils.lerp)(speed, nextSpeed, 0.01);
          this.params.wind = (0, _utils.lerp)(wind, nextWind, 0.01);
          this.params.rotationSpeed = (0, _utils.lerp)(rotationSpeed, nextRotationSpeed, 0.01);
          if (this.framesSinceLastUpdate++ > this.config.changeFrequency) {
            this.updateTargetParams();
            this.framesSinceLastUpdate = 0;
          }
        }
      }, {
        key: "getImageOffscreenCanvas",
        value: function getImageOffscreenCanvas(image, size) {
          var _sizes$size;
          if (image instanceof HTMLImageElement && image.loading)
            return image;
          var sizes = Snowflake2.offscreenCanvases.get(image);
          if (!sizes) {
            sizes = {};
            Snowflake2.offscreenCanvases.set(image, sizes);
          }
          if (!(size in sizes)) {
            var _canvas$getContext;
            var canvas = document.createElement("canvas");
            canvas.width = size;
            canvas.height = size;
            (_canvas$getContext = canvas.getContext("2d")) === null || _canvas$getContext === void 0 ? void 0 : _canvas$getContext.drawImage(image, 0, 0, size, size);
            sizes[size] = canvas;
          }
          return (_sizes$size = sizes[size]) !== null && _sizes$size !== void 0 ? _sizes$size : image;
        }
      }, {
        key: "draw",
        value: function draw(ctx) {
          if (this.image) {
            ctx.setTransform(1, 0, 0, 1, this.params.x, this.params.y);
            var radius = Math.ceil(this.params.radius);
            ctx.rotate(this.params.rotation * Math.PI / 180);
            ctx.drawImage(this.getImageOffscreenCanvas(this.image, radius), -Math.ceil(radius / 2), -Math.ceil(radius / 2), radius, radius);
          } else {
            ctx.beginPath();
            ctx.arc(this.params.x, this.params.y, this.params.radius, 0, 2 * Math.PI);
            ctx.fillStyle = this.config.color;
            ctx.closePath();
            ctx.fill();
          }
        }
      }]);
      return Snowflake2;
    }();
    _defineProperty(Snowflake, "offscreenCanvases", /* @__PURE__ */ new WeakMap());
    var _default = Snowflake;
    exports["default"] = _default;
  }
});

// node_modules/react-snowfall/lib/hooks.js
var require_hooks = __commonJS({
  "node_modules/react-snowfall/lib/hooks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.useComponentSize = void 0;
    exports.useDeepCompareEffect = useDeepCompareEffect;
    exports.useDeepMemo = useDeepMemo;
    exports.useSnowflakes = exports.useSnowfallStyle = void 0;
    var _react = require_react();
    var _reactFastCompare = _interopRequireDefault(require_react_fast_compare());
    var _Snowflake = _interopRequireDefault(require_Snowflake());
    var _config = require_config();
    var _utils = require_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var createSnowflakes = function createSnowflakes2(canvasRef, amount, config) {
      if (!canvasRef.current)
        return [];
      var snowflakes = [];
      for (var i = 0; i < amount; i++) {
        snowflakes.push(new _Snowflake["default"](canvasRef.current, config));
      }
      return snowflakes;
    };
    var useSnowflakes = function useSnowflakes2(canvasRef, amount, config) {
      var _useState = (0, _react.useState)([]), _useState2 = _slicedToArray(_useState, 2), snowflakes = _useState2[0], setSnowflakes = _useState2[1];
      (0, _react.useEffect)(function() {
        setSnowflakes(function(snowflakes2) {
          var sizeDifference = amount - snowflakes2.length;
          if (sizeDifference > 0) {
            return [].concat(_toConsumableArray(snowflakes2), _toConsumableArray(createSnowflakes(canvasRef, sizeDifference, config)));
          }
          if (sizeDifference < 0) {
            return snowflakes2.slice(0, amount);
          }
          return snowflakes2;
        });
      }, [amount, canvasRef, config]);
      (0, _react.useEffect)(function() {
        setSnowflakes(function(snowflakes2) {
          return snowflakes2.map(function(snowflake) {
            snowflake.updateConfig(config);
            return snowflake;
          });
        });
      }, [config]);
      return snowflakes;
    };
    exports.useSnowflakes = useSnowflakes;
    var useComponentSize = function useComponentSize2(ref) {
      var _useState3 = (0, _react.useState)((0, _utils.getSize)(ref.current)), _useState4 = _slicedToArray(_useState3, 2), size = _useState4[0], setSize = _useState4[1];
      var resizeHandler = (0, _react.useCallback)(function() {
        if (ref.current) {
          setSize((0, _utils.getSize)(ref.current));
        }
      }, [ref]);
      (0, _react.useLayoutEffect)(function() {
        var _window = window, ResizeObserver = _window.ResizeObserver;
        if (!ref.current)
          return;
        resizeHandler();
        if (typeof ResizeObserver === "function") {
          var resizeObserver = new ResizeObserver(resizeHandler);
          resizeObserver.observe(ref.current);
          return function() {
            return resizeObserver.disconnect();
          };
        } else {
          window.addEventListener("resize", resizeHandler);
          return function() {
            return window.removeEventListener("resize", resizeHandler);
          };
        }
      }, [ref, resizeHandler]);
      return size;
    };
    exports.useComponentSize = useComponentSize;
    var useSnowfallStyle = function useSnowfallStyle2(overrides) {
      var styles = (0, _react.useMemo)(function() {
        return _objectSpread(_objectSpread({}, _config.snowfallBaseStyle), overrides || {});
      }, [overrides]);
      return styles;
    };
    exports.useSnowfallStyle = useSnowfallStyle;
    function useDeepCompareEffect(effect, deps) {
      var ref = (0, _react.useRef)(deps);
      if (!(0, _reactFastCompare["default"])(deps, ref.current)) {
        ref.current = deps;
      }
      return (0, _react.useEffect)(effect, ref.current);
    }
    function useDeepMemo(value) {
      var _useState5 = (0, _react.useState)(value), _useState6 = _slicedToArray(_useState5, 2), state = _useState6[0], setState = _useState6[1];
      useDeepCompareEffect(function() {
        return setState(value);
      }, [value]);
      return state;
    }
  }
});

// node_modules/react-snowfall/lib/Snowfall.js
var require_Snowfall = __commonJS({
  "node_modules/react-snowfall/lib/Snowfall.js"(exports) {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _config = require_config();
    var _hooks = require_hooks();
    var _Snowflake = require_Snowflake();
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { "default": obj };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    var Snowfall = function Snowfall2() {
      var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$color = _ref.color, color = _ref$color === void 0 ? _Snowflake.defaultConfig.color : _ref$color, _ref$changeFrequency = _ref.changeFrequency, changeFrequency = _ref$changeFrequency === void 0 ? _Snowflake.defaultConfig.changeFrequency : _ref$changeFrequency, _ref$radius = _ref.radius, radius = _ref$radius === void 0 ? _Snowflake.defaultConfig.radius : _ref$radius, _ref$speed = _ref.speed, speed = _ref$speed === void 0 ? _Snowflake.defaultConfig.speed : _ref$speed, _ref$wind = _ref.wind, wind = _ref$wind === void 0 ? _Snowflake.defaultConfig.wind : _ref$wind, _ref$rotationSpeed = _ref.rotationSpeed, rotationSpeed = _ref$rotationSpeed === void 0 ? _Snowflake.defaultConfig.rotationSpeed : _ref$rotationSpeed, _ref$snowflakeCount = _ref.snowflakeCount, snowflakeCount = _ref$snowflakeCount === void 0 ? 150 : _ref$snowflakeCount, images = _ref.images, style = _ref.style;
      var mergedStyle = (0, _hooks.useSnowfallStyle)(style);
      var canvasRef = (0, _react.useRef)(null);
      var canvasSize = (0, _hooks.useComponentSize)(canvasRef);
      var animationFrame = (0, _react.useRef)(0);
      var lastUpdate = (0, _react.useRef)(Date.now());
      var config = (0, _hooks.useDeepMemo)({
        color,
        changeFrequency,
        radius,
        speed,
        wind,
        rotationSpeed,
        images
      });
      var snowflakes = (0, _hooks.useSnowflakes)(canvasRef, snowflakeCount, config);
      var render = (0, _react.useCallback)(function() {
        var framesPassed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
        var canvas = canvasRef.current;
        if (canvas) {
          snowflakes.forEach(function(snowflake) {
            return snowflake.update(canvas, framesPassed);
          });
          var ctx = canvas.getContext("2d");
          if (ctx) {
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);
            snowflakes.forEach(function(snowflake) {
              return snowflake.draw(ctx);
            });
          }
        }
      }, [snowflakes]);
      var loop = (0, _react.useCallback)(function() {
        var now = Date.now();
        var msPassed = Date.now() - lastUpdate.current;
        lastUpdate.current = now;
        var framesPassed = msPassed / _config.targetFrameTime;
        render(framesPassed);
        animationFrame.current = requestAnimationFrame(loop);
      }, [render]);
      (0, _react.useEffect)(function() {
        loop();
        return function() {
          return cancelAnimationFrame(animationFrame.current);
        };
      }, [loop]);
      return _react["default"].createElement("canvas", {
        ref: canvasRef,
        height: canvasSize.height,
        width: canvasSize.width,
        style: mergedStyle,
        "data-testid": "SnowfallCanvas"
      });
    };
    var _default = Snowfall;
    exports["default"] = _default;
  }
});
export default require_Snowfall();
//# sourceMappingURL=react-snowfall.js.map
